Creacion de la estructuras Carpetas (basico)
	//Models
	//Servicio---(Estructuras interactuando con los datos)
	//Estructuras
	//Data------(los Json)
	//DTOs------(no creo que lo nesecite)
	//Controllers---(mis apis Clientes,Tarjetas,Transacciones)
	//Utils-----(el deserealizador HDP generico + Creador de Rutas)
	//ArmadoEstructuras----(Estructuras de Datos y llenado dinamico)
	

clases Models
	//Cliente
	//Tarjeta
	//Transaccion
	//TipoTransaccion(enum)
	//Establecimiento
	//Categoria(enum)

Servicio
	//ClientesServicio(CRUD)
	//TarjetasServicio(CRUD)
	//TransaccionesServicio(listar Transacciones,Buscar Transaccion)



*******************************Por terminar*******************************************************
creacion de :
	// DTOs para cada entidad(Modelo)-- (lol si lo nesecite :) )

funcionalidades:
	//Clientes
		agregar solo cliente
		agregar solo cliente-tarjeta
		ver todo
		ver solo cliente
		modificar solo cliente-Nombre
		buscar solo cliente
		eliminar todo rastro de cliente(tarjetas(transacciones))

	//Tarjetas
		agregar solo tarjeta
		agregar solo tarjeta-Transaccion
		ver todo
		ver solo tarjeta
		modificar solo tarjeta
		Buscar tarjeta por idcliente
		buscar arjeta por Numero-Tarjeta

	//Transacciones
		Listar transaccion
		Busqueda de una Transaccion

	


	Que Otras Clases Puedo Agregar??




						IENumerable<T>:

	>>>>>>>>>>>>>>>>>> las estructuras ahora tiene un metodo IEnumerable 
						es un Utilitario que trabaja sobre secuencias



///////////////////////////////////>>>>>>>>>>>>>>>>>A ensamblar:


**************Gestión de Clientes (ABB)**********************
Controlador: ClientesController

Estructura interna: ABB<Cliente> (índice por Id)


GET	/api/clientes	Lista todos los clientes (in-order)// por el momento // mejor asi que se quede
GET	/api/clientes/{id}	Obtiene un cliente por su Id
POST	/api/clientes	Crea un nuevo cliente
PUT	/api/clientes/{id}	Actualiza (caso : nombre) usando DTO mínimo
DELETE	/api/clientes/{id}	Elimina un cliente


****************************Gestión de Sesiones / Usuarios Activos (AVL)*********************
Controlador: SesionesController

Estructura interna: AVl<> manteniendo los clienteId activos


POST	/api/sesiones/login/{clienteId}	Marca al cliente como “activo” (AVL.Insertar)
POST	/api/sesiones/logout/{clienteId}	Quita al cliente de los activos (AVL.Eliminar)
GET	/api/sesiones/activos	Lista todos los clienteId activos (in-order)



*******************************Gestión de Transacciones (Cola + Pila)***************************
Controlador: TransaccionesController

Estructuras:

Cola<Transaccion> para transacciones pendientes de autorización o batch.

Pila<Transaccion> para historial reciente (últimas N operaciones).


GET	/api/transacciones	Lista todas las transacciones
GET	/api/transacciones/{id}	Busca transacción por Id (puede usar ABB)
GET	/api/transacciones/pendientes	Muestra cola de transacciones pendientes
POST	/api/transacciones/pendientes	Encola una transacción para procesar luego
POST	/api/transacciones/procesar	Procesa/decola todas las transacciones pendientes
GET	/api/transacciones/recientes?n={n}	Muestra las últimas n transacciones de la pila
POST	/api/transacciones	Crea y aplica (inmediato) una transacción nueva



***********************************Gestión de Tarjetas (Lista Enlazada + Hash para acceso rápido)
Controlador: TarjetasController

Estructuras:

ListaEnlazada<Transaccion> en cada tarjeta para su historial completo.

TablaHash<string, Tarjeta> 

GET	/api/tarjetas	Lista todas las tarjetas
GET	/api/tarjetas/{id}	Obtiene tarjeta por Id
GET	/api/tarjetas/numero/{numero}	Obtiene tarjeta por número (hash lookup)
GET	/api/tarjetas/{id}/movimientos	Historial completo (lista enlazada, in-order)
POST	/api/tarjetas	Crea una tarjeta (vinculada a un cliente existente)
PUT	/api/tarjetas/{id}/pin	Cambia el PIN
DELETE	/api/tarjetas/{id}	Elimina una tarjeta